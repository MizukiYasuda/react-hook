{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","his","current","winner","calculateWinner","moves","map","step","move","desc","key","jumpTo","slice","length","concat","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"mKAIA,SAASA,EAAOC,GACd,OACE,4BACEC,UAAU,SACVC,QAASF,EAAME,SAEdF,EAAMG,OAKb,SAASC,EAAMJ,GACb,IAAMK,EAAe,SAAAC,GACnB,OAAO,kBAACP,EAAD,CACLI,MAAOH,EAAMO,QAAQD,GACrBJ,QAAS,kBAAIF,EAAME,QAAQI,OAI/B,OACE,6BACE,yBAAKL,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,KAMtB,SAASG,IAAQ,IAwCXC,EAxCU,EACgBC,mBAAS,CAAC,CACtCH,QAASI,MAAM,GAAGC,KAAK,SAFX,mBACPC,EADO,KACEC,EADF,OAIsBJ,mBAAS,GAJ/B,mBAIPK,EAJO,KAIKC,EAJL,OAKgBN,oBAAS,GALzB,mBAKPO,EALO,KAKEC,EALF,KAyBRC,EAAMN,EACNO,EAAUD,EAAIJ,GACdM,EAASC,EAAgBF,EAAQb,SAEjCgB,EAAQJ,EAAIK,KAAI,SAACC,EAAMC,GAC3B,IAAMC,EAAOD,EAAI,sBACAA,GACf,mBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQxB,QAAS,kBAfR,SAAAuB,GACbT,EAAcS,GACdP,EAAYO,EAAK,IAAO,GAaGI,CAAOH,KAAQC,OAY5C,OALElB,EADEY,EACI,kBAAcA,GAEd,uBAAmBJ,EAAU,IAAM,KAIzC,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAASa,EAAQb,QACjBL,QAAS,SAACI,GAAD,OA7CG,SAAAA,GAClB,IAAMa,EAAMN,EAAQiB,MAAM,EAAGf,EAAa,GAEpCR,EADUY,EAAIA,EAAIY,OAAS,GACTxB,QAAQuB,QAC5BR,EAAgBf,IAAYA,EAAQD,KACxCC,EAAQD,GAAKW,EAAU,IAAM,IAC7BH,EAAWK,EAAIa,OAAO,CAAC,CACrBzB,QAASA,MAEXS,EAAcG,EAAIY,QAClBb,GAAYD,IAmCUgB,CAAY3B,OAGhC,yBAAKL,UAAU,aACb,6BAAMQ,GACN,4BAAKc,KAMb,SAASD,EAAgBf,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5B,EAAI,EAAGA,EAAI4B,EAAMH,OAAQzB,IAAK,CAAC,IAAD,cACnB4B,EAAM5B,GADa,GAC9B6B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAITG,IAASC,OACP,kBAAC/B,EAAD,MACAgC,SAASC,eAAe,U","file":"static/js/main.1697186d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className=\"square\"\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  )\n}\n\nfunction Board(props) {\n  const renderSquare = i => {\n    return <Square\n      value={props.squares[i]}\n      onClick={()=>props.onClick(i)}\n    />;\n  }\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }])\n  const [stepNumber, setStepNumber] = useState(0)\n  const [xIsNext, setXIsNext] = useState(true)\n  \n  const handleClick = i => {\n    const his = history.slice(0, stepNumber + 1)\n    const current = his[his.length - 1]\n    const squares = current.squares.slice()\n    if (calculateWinner(squares) || squares[i]) return\n    squares[i] = xIsNext ? 'X' : 'O'\n    setHistory(his.concat([{\n      squares: squares,\n    }]))\n    setStepNumber(his.length)\n    setXIsNext(!xIsNext)\n  }\n\n  const jumpTo = step => {\n    setStepNumber(step)\n    setXIsNext((step%2) === 0)\n  }\n\n  const his = history\n  const current = his[stepNumber]\n  const winner = calculateWinner(current.squares)\n\n  const moves = his.map((step, move) => {\n    const desc = move ?\n      `Go to move #${move}` :\n      'Go to game start'\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    )\n  })\n\n  let status\n  if (winner) {\n    status = `winner: ${winner}`\n  } else {\n    status = `Next player: ${xIsNext ? 'X' : 'O'}`\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClick(i)}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}